name: Automatic doc update (EN + ITA)

on:
  push:
    branches:
    - main

permissions:
  contents: write

env:
  RUN_CHECKOUT: 'true'
  RUN_SETUP: 'true'
  RUN_FETCH_HISTORY: 'true'
  RUN_SWAGGER: 'true'
  RUN_VERSIONING: 'true'
  RUN_BUILD_DOCS: 'true'
  RUN_GENERATE_PDF: 'true'
  RUN_DEPLOY_DOCS: 'true' # Mike deployment attivato

jobs:
  doc_pipeline:
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout repository
      if: env.RUN_CHECKOUT == 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      if: env.RUN_SETUP == 'true'
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      if: env.RUN_SETUP == 'true'
      run: pip install -r preConfiguration/requirements.txt beautifulsoup4 pyyaml

    - name: Set Git user
      if: env.RUN_SETUP == 'true'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Fetch all history
      if: env.RUN_FETCH_HISTORY == 'true'
      run: git fetch --all

    - name: Fetch gh-pages branch
      if: env.RUN_FETCH_HISTORY == 'true'
      run: |
        git fetch origin gh-pages
        git checkout origin/gh-pages -- latest

    - name: Check if 'latest' is a symlink or a directory
      if: env.RUN_FETCH_HISTORY == 'true'
      run: ls -l latest

    - name: Determine next version
      if: env.RUN_VERSIONING == 'true'
      id: versioning
      run: |
        # Gestisci il caso quando 'latest' non esiste o non √® un symlink
        if [ -L latest ]; then
          latest_version=$(readlink latest)
          echo "Latest version from symlink: $latest_version"
        elif [ -f latest ]; then
          latest_version=$(cat latest)
          echo "Latest version from file: $latest_version"
        else
          latest_version="7.10.0"
          echo "No latest found, starting from: $latest_version"
        fi

        anno=7
        last_mese=$(echo "$latest_version" | awk -F. '{print $2}')
        last_patch=$(echo "$latest_version" | awk -F. '{print $3}')

        mese=$(date +'%m')

        if [ "$mese" != "$last_mese" ]; then
          nuova_patch=0
        else
          nuova_patch=$((last_patch + 1))
        fi

        nuova_versione="${anno}.${mese}.${nuova_patch}"
        echo "Calcolata nuova versione: $nuova_versione"

        echo "new_version=$nuova_versione" >> $GITHUB_ENV
        echo "new_version=$nuova_versione" >> $GITHUB_OUTPUT

    - name: Generate mkdocs configs (EN + ITA)
      run: python preConfiguration/build/build_config.py
    - name: Prepare PDF template
      run: |
        mkdir -p documentation/pdfGeneration
        python preConfiguration/pdf/pdf_config.py

    # ----------------------------
    # üü¢ BUILD + PDF ITALIANO
    # ----------------------------
    - name: Build documentation IT
      if: env.RUN_BUILD_DOCS == 'true'
      run: mkdocs build -f config/ita/mkdocs.yml

    - name: Renumber figcaptions IT
      if: env.RUN_BUILD_DOCS == 'true'
      run: |
        if [ -f generated/ita/print_page/index.html ]; then \
          python preConfiguration/build/figureEnumerator.py generated/ita/print_page/index.html; \
        else \
          echo "print_page.html (IT) non trovato"; \
        fi

    - name: Install wkhtmltopdf
      run: |
        wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.focal_amd64.deb
        sudo apt install -y ./wkhtmltox_0.12.5-1.focal_amd64.deb

    - name: Generate PDF IT
      if: env.RUN_GENERATE_PDF == 'true'
      run: |
        if [ -f generated/ita/print_page/index.html ]; then \
        wkhtmltopdf \
          --enable-local-file-access \
          --enable-javascript \
          --javascript-delay 1000 \
          --print-media-type \
          --disable-smart-shrinking \
          --dpi 200 \
          --encoding UTF-8 \
          --header-html "file://$(pwd)/documentation/pdfGeneration/pdf-header.html" \
          --footer-html "file://$(pwd)/documentation/pdfGeneration/pdf-footer.html" \
          --user-style-sheet "file://$(pwd)/documentation/pdfGeneration/pdf-leonardo.css" \
          --footer-spacing 10 \
          --header-spacing 10 \
          --margin-top 51.317 \
          --margin-bottom 33.56 \
          --margin-left 19.138 \
          --margin-right 13 \
          "file://$(pwd)/documentation/pdfGeneration/pdf-firstPage.html" \
          "file://$(pwd)/generated/ita/print_page/index.html" \
          "$(pwd)/generated/SCMP_SUM_it.pdf"; \
        else echo "print_page.html IT non generato"; fi

    # ----------------------------
    # üü¢ BUILD + PDF ENGLISH
    # ----------------------------
    - name: Build documentation EN
      if: env.RUN_BUILD_DOCS == 'true'
      run: mkdocs build -f config/en/mkdocs.yml

    - name: Renumber figcaptions EN
      if: env.RUN_BUILD_DOCS == 'true'
      run: |
        if [ -f generated/en/print_page/index.html ]; then \
          python preConfiguration/build/figureEnumerator.py generated/en/print_page/index.html; \
        else \
          echo "print_page.html (EN) non trovato"; \
        fi

    - name: Generate PDF EN
      if: env.RUN_GENERATE_PDF == 'true'
      run: |
        if [ -f generated/en/print_page/index.html ]; then \
        wkhtmltopdf \
          --enable-local-file-access \
          --enable-javascript \
          --javascript-delay 1000 \
          --print-media-type \
          --disable-smart-shrinking \
          --dpi 200 \
          --encoding UTF-8 \
          --header-html "file://$(pwd)/documentation/pdfGeneration/pdf-header.html" \
          --footer-html "file://$(pwd)/documentation/pdfGeneration/pdf-footer.html" \
          --user-style-sheet "file://$(pwd)/documentation/pdfGeneration/pdf-leonardo.css" \
          --footer-spacing 10 \
          --header-spacing 10 \
          --margin-top 51.317 \
          --margin-bottom 33.56 \
          --margin-left 19.138 \
          --margin-right 13 \
          "file://$(pwd)/documentation/pdfGeneration/pdf-firstPage.html" \
          "file://$(pwd)/generated/en/print_page/index.html" \
          "$(pwd)/generated/SCMP_SUM_en.pdf"; \
        else echo "print_page.html EN non generato"; fi

    # ----------------------------
    # üîπ SWAGGER + IMAGE OPTIMIZATION
    # ----------------------------
    - name: Login API(EDIT)
      if: env.RUN_SWAGGER == 'true'
      id: api_login
      run: |
        response=$(curl -s --location 'https://www.movincloud.com//api/iam/login' \
        -H "Content-Type: application/json" \
        -d '{
              "user": "cmp_api_test",
              "psw": "${{ secrets.PSW }}",
              "get_routes": true,
              "routes_for_module": "IAM/IAM_FE",
              "app_to_use": "TUTTE",
              "iam_fe_login": true,
              "error_on_iam_routes": false
            }')
        token=$(echo "$response" | jq -r '.access_token')
        if [ "$token" == "null" ] || [ -z "$token" ]; then
          echo "Login fallita: token non ricevuto"
          exit 1
        fi
        echo "::add-mask::$token"
        echo "API_TOKEN=$token" >> $GITHUB_ENV
        echo "api_token=$token" >> $GITHUB_OUTPUT

    - name: Fetch authenticated Swagger specs (shared for EN/IT)
      if: env.RUN_SWAGGER == 'true'
      run: |
        API_TOKEN=${{ steps.api_login.outputs.api_token }}
        VARS=("finops" "provisioning" "rm" "abs" "rmreport" "rmcosts" "rmmonitoring" "rmsecurity" "rmservice" "siem" "txm" "tenant")
        mkdir -p includes/swagger
        for var in "${VARS[@]}"; do
          echo "üîÑ Fetching Swagger for API: $var"
            HTTP_RESPONSE=$(curl --location --silent --show-error --write-out "HTTPSTATUS:%{http_code}" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "x-Tenant: Default" \
              "https://www.movincloud.com/api/${var}/v3/api-docs" \
              -o "includes/swagger/${var}.json")
          HTTP_BODY=$(cat includes/swagger/${var}.json || echo '{}')
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          echo "‚úÖ Saved includes/swagger/${var}.json (HTTP $HTTP_STATUS)"
          echo "üìÑ Preview: $(echo "$HTTP_BODY" | head -c 160)"
        done
        echo "üìÅ Swagger specs centralizzati in includes/swagger"

    - name: Copy all swagger artifacts into docs (EN + ITA) before build
      if: env.RUN_SWAGGER == 'true'
      run: |
        if [ -d includes/swagger ]; then
          echo "‚û°Ô∏è Copying swagger artifacts from includes/swagger to docs/<lang>/swagger"
          for LANG in en ita; do \
            mkdir -p docs/$LANG/swagger; \
            # Copy everything (json, md, yaml, images, etc.)
            cp -a includes/swagger/. docs/$LANG/swagger/ 2>/dev/null || true; \
          done; \
          echo "‚úÖ Copiati tutti i file swagger in docs/<lang>/swagger"; \
          ls -1 docs/en/swagger || true; \
          ls -1 docs/ita/swagger || true; \
        else
          echo "‚ö†Ô∏è Directory includes/swagger non presente, nulla da copiare";
        fi

    - name: Optimize images
      run: python preConfiguration/build/image_resizier.py

    # ----------------------------
    # üîπ DEPLOY PREBUILT SU GH-PAGES (Senza Mike)
    # ----------------------------
    - name: Deploy prebuilt to gh-pages
      if: env.RUN_DEPLOY_DOCS == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e

        echo "Deploying version ${new_version}"

        # Configura Git
        git config user.name "github-actions"
        git config user.email "actions@github.com"

        # Clona il branch gh-pages in una cartella temporanea
        TMP_DIR=$(mktemp -d)
        git clone --branch gh-pages --single-branch https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git $TMP_DIR

        cd $TMP_DIR

        # Crea la cartella versione numerica
        VERSION_DIR="${new_version}"
        mkdir -p "$VERSION_DIR"

        # Copia tutto da generated/ nella cartella versione
        cp -a $GITHUB_WORKSPACE/generated/. "$VERSION_DIR/"

        # Crea/aggiorna il symlink latest
        rm -f latest
        ln -s "$new_version" latest

        # Commit & push
        git add .
        git commit -m "Deploy documentation version ${new_version} [ci skip]" || echo "No changes to commit"
        git push origin gh-pages

        echo "‚úÖ Deploy su gh-pages completato!"
